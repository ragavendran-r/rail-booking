// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: booking/booking.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookingService_RailBooking_FullMethodName      = "/BookingService/railBooking"
	BookingService_GetBookingByUser_FullMethodName = "/BookingService/GetBookingByUser"
	BookingService_GetAllBookings_FullMethodName   = "/BookingService/GetAllBookings"
	BookingService_CancelBooking_FullMethodName    = "/BookingService/cancelBooking"
	BookingService_ModifySeatByUser_FullMethodName = "/BookingService/ModifySeatByUser"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BookingService service definitions for booking operations
type BookingServiceClient interface {
	// railBooking books a rail ticket for the user
	RailBooking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*Booking, error)
	// GetBookingByUser returns a booking for the user
	GetBookingByUser(ctx context.Context, in *GetBookingByUserRequest, opts ...grpc.CallOption) (*Booking, error)
	// GetAllBookings returns list of all bookings
	GetAllBookings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookingList, error)
	// cancelBooking for the user
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error)
	// ModifySeatByUser modifies the seat for the user
	ModifySeatByUser(ctx context.Context, in *SeatModificationRequest, opts ...grpc.CallOption) (*SeatModificationResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) RailBooking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Booking)
	err := c.cc.Invoke(ctx, BookingService_RailBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingByUser(ctx context.Context, in *GetBookingByUserRequest, opts ...grpc.CallOption) (*Booking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Booking)
	err := c.cc.Invoke(ctx, BookingService_GetBookingByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetAllBookings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookingList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingList)
	err := c.cc.Invoke(ctx, BookingService_GetAllBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingResponse)
	err := c.cc.Invoke(ctx, BookingService_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) ModifySeatByUser(ctx context.Context, in *SeatModificationRequest, opts ...grpc.CallOption) (*SeatModificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeatModificationResponse)
	err := c.cc.Invoke(ctx, BookingService_ModifySeatByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
//
// BookingService service definitions for booking operations
type BookingServiceServer interface {
	// railBooking books a rail ticket for the user
	RailBooking(context.Context, *BookingRequest) (*Booking, error)
	// GetBookingByUser returns a booking for the user
	GetBookingByUser(context.Context, *GetBookingByUserRequest) (*Booking, error)
	// GetAllBookings returns list of all bookings
	GetAllBookings(context.Context, *Empty) (*BookingList, error)
	// cancelBooking for the user
	CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error)
	// ModifySeatByUser modifies the seat for the user
	ModifySeatByUser(context.Context, *SeatModificationRequest) (*SeatModificationResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) RailBooking(context.Context, *BookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RailBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingByUser(context.Context, *GetBookingByUserRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByUser not implemented")
}
func (UnimplementedBookingServiceServer) GetAllBookings(context.Context, *Empty) (*BookingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBookings not implemented")
}
func (UnimplementedBookingServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedBookingServiceServer) ModifySeatByUser(context.Context, *SeatModificationRequest) (*SeatModificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySeatByUser not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_RailBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).RailBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_RailBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).RailBooking(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingByUser(ctx, req.(*GetBookingByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetAllBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetAllBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetAllBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetAllBookings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_ModifySeatByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeatModificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ModifySeatByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ModifySeatByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ModifySeatByUser(ctx, req.(*SeatModificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "railBooking",
			Handler:    _BookingService_RailBooking_Handler,
		},
		{
			MethodName: "GetBookingByUser",
			Handler:    _BookingService_GetBookingByUser_Handler,
		},
		{
			MethodName: "GetAllBookings",
			Handler:    _BookingService_GetAllBookings_Handler,
		},
		{
			MethodName: "cancelBooking",
			Handler:    _BookingService_CancelBooking_Handler,
		},
		{
			MethodName: "ModifySeatByUser",
			Handler:    _BookingService_ModifySeatByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking/booking.proto",
}
